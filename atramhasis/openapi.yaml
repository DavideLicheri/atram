openapi: 3.0.3

info:
  title: Atramhasis API
  version: 1.0.0

servers:
  - url: '/'

paths:
  /conceptschemes/{scheme_id}/c:
    post:
      summary: Add a concept or collection to a conceptscheme.
      description: Add a concept or collection to a conceptscheme. The response body will
        contain a representation of the concept or collection after is has
        been added to the conceptscheme.
      tags:
        - Concepts and collections
      parameters:
        - name: scheme_id
          in: path
          description: The identifier for a certain concept scheme.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Data to create concept or collection
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConceptRequest"

      responses:
        201:
          description: The concept or collection was added succesfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConceptResponse"
        400:
          description: The concept or collection could not be added because
            the submitted json was invalid due to eg. validation errors.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        404:
          description: The conceptscheme `scheme_id` does not exist.
        405:
          description: The concept or collection could not be added because
            the conceptscheme `scheme_id` is a readonly conceptscheme.
        500:
          $ref: "#/components/responses/Error"

  /conceptschemes/{scheme_id}/c/{c_id}:
    put:
      summary: Edit the concept or collection with id `c_id`.
      description: Edit the concept or collection with id `c_id`. The response body will
        contain a representation of the concept or collection after the
        modifications.
      tags:
        - Concepts and collections
      parameters:
        - name: scheme_id
          in: path
          description: The identifier for a certain concept scheme.
          required: true
          schema:
            type: string
        - name: c_id
          in: path
          description: The identifier for a certain concept or collection.
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: Data to create concept or collection
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConceptRequest"

      responses:
        200:
          description: The concept or collection was edited succesfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConceptResponse"
        400:
          description: The concept or collection could not be edited because
            the submitted json was invalid due to eg. validation errors.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        404:
          description: The conceptscheme `scheme_id` or
            the concept or collection `c_id` does not exist.
        405:
          description: The concept or collection could not be edited because
            the conceptscheme `scheme_id` is a readonly conceptscheme.
        500:
          $ref: "#/components/responses/Error"

    delete:
      summary: Remove the concept with id `c_id`.
      description: Remove the concept with id `c_id`.
        The response body will contain the last representation known by the service.
      tags:
        - Concepts and collections
      parameters:
        - name: scheme_id
          in: path
          description: The identifier for a certain concept scheme.
          required: true
          schema:
            type: string
        - name: c_id
          in: path
          description: The identifier for a certain concept or collection.
          required: true
          schema:
            type: integer

      responses:
        200:
          description: The concept or collection was deleted succesfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConceptResponse"
        400:
          description: The concept or collection could not be deleted because
            the submitted json was invalid due to eg. validation errors.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        404:
          description: The conceptscheme `scheme_id` or
            the concept or collection `c_id` does not exist.
        405:
          description: The concept or collection could not be deleted because
            the conceptscheme `scheme_id` is a readonly conceptscheme.
        409:
          description: The concept or collection could not be deleted because
            Atramhasis has determined that it's still being used somewhere else. The
            response body will contain a message and a list of :term:`URI`'s that
            are using this concept.
        500:
          $ref: "#/components/responses/Error"

  /languages:
    get:
      summary: List all languages known to this Atramhasis instance.
      description: List all languages known to this Atramhasis instance.
      tags:
        - Languages
      parameters:
        - name: sort
          in: query
          description: Which field to sort on. Use `-` and `+` to indicate sort order.
            Eg. `id` or `+id` sort ascending on `id`, `-name` sort descending on
            `name`.
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of languages was returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Language"

  /languages/{l_id}:
    get:
      summary: Get information on a certain language.
      description: Get information on a certain language.
      tags:
        - Languages
      parameters:
        - name: l_id
          in: path
          description: The identifier for a certain language.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The language was found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Language"
        404:
          description: The language was not found in this instance.

    put:
      summary: Edit or create language
      description: Update the information on a certain language or create an entry for a new
        one.
      tags:
        - Languages
      parameters:
        - name: l_id
          in: path
          description: The identifier for a certain language.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Data to create or edit language
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Language"

      responses:
        200:
          description: The language was updated or added.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Language"
        400:
          description: The request could not be executed because of problems with
            the submitted data. Most likely you are submitting an invalid IANA
            langage code.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
    delete:
      summary: Delete language
      description: Delete a language from this Atramhasis instance.
      tags:
        - Languages
      parameters:
        - name: l_id
          in: path
          description: The identifier for a certain language.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The language was deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Language"
        404:
          description: The language was not found in this instance.


components:
  schemas:
    Language:
      type: object
      properties:
        id:
          type: integer
        name:
          type: integer
    Relatedconcept:
      type: object
      properties:
        id:
          type: integer
    Label:
      type: object
      properties:
        type:
          type: string
        language:
          type: string
        label:
          type: string
    Note:
      type: object
      properties:
        note:
          type: string
        type:
          type: string
        language:
          type: string
    Source:
      type: object
      properties:
        citation:
          type: string
    Concepts:
      type: array
      items:
        $ref: "#/components/schemas/Relatedconcept"
    MatchList:
      type: array
      items:
        type: string
    Matches:
      type: array
      items:
        type: object
        properties:
          broad:
            $ref: "#/components/schemas/MatchList"
          close:
            $ref: "#/components/schemas/MatchList"
          exact:
            $ref: "#/components/schemas/MatchList"
          narrow:
            $ref: "#/components/schemas/MatchList"
          related:
            $ref: "#/components/schemas/MatchList"

    ConceptRequest:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
        labels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
        notes:
          type: array
          items:
            $ref: "#/components/schemas/Note"
        sources:
          type: array
          items:
            $ref: "#/components/schemas/Source"
        broader:
          $ref: "#/components/schemas/Concepts"
        narrower:
          $ref: "#/components/schemas/Concepts"
        related:
          $ref: "#/components/schemas/Concepts"
        members:
          $ref: "#/components/schemas/Concepts"
        member_of:
          $ref: "#/components/schemas/Concepts"
        subordinate_arrays:
          $ref: "#/components/schemas/Concepts"
        matches:
          $ref: "#/components/schemas/Matches"
        infer_concept_relations:
          type: boolean

    ConceptResponse:
      allOf:
        - $ref: '#/components/schemas/ConceptRequest'
        - type: object
          properties:
            id:
              type: integer
            uri:
              type: string


    ValidationError:
      type: object
      required:
        - message
        - errors
      properties:
        message:
          type: string
        errors:
          type: string

    Error:
      type: object
      required:
        - message
      properties:
        field:
          nullable: true
          type: string
        message:
          nullable: true
          type: string
        exception:
          nullable: true
          type: string

    Errors:
      type: array
      items:
        $ref: "#/components/schemas/Error"

  responses:
    BadRequest:
      description: OpenAPI request/response validation failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationError"

    Error:
      description: OpenAPI request/response validation failed
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/Error"
              - $ref: "#/components/schemas/Errors"
    NotFound:
      description: Resource not found
